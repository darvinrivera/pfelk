# 02-firewall.pfelk
################################################################################
# Version: 23.09                                                               #
# Required: True                                                               #
# Description: Enriches pf (firewall) logs (OPNsense/pfSense) 		       #
#                                                                              #
################################################################################
#
filter {
### filterlog ###
  if [log][syslog][appname] =~ /^filterlog$/ {
    mutate {
      add_tag => "firewall"
      add_field => { "[event][dataset]" => "pfelk.firewall" }
      replace => { "[log][syslog][appname]" => "firewall" }
      copy => { "filter_message" => "pfelk_csv" }
    }
    mutate {
      strip => "pfelk_csv"
      split => { "pfelk_csv" => "," }
    }

    # [Common Fields]
    # rule.id, pf.rule.subid, pf.anchor, rule.uuid, interface.name, event.reason, event.action, network.direction, network.type
    # [Not ECS compliant fields] pf.rule.subid, 
    mutate {
      add_field => {
        "[rule][id]" =>		  "%{[pfelk_csv][0]}"
        "[pf][rule][subid]" =>    "%{[pfelk_csv][1]}"
        "[pf][anchor]" =>	  "%{[pfelk_csv][2]}"
        "[rule][uuid]" =>         "%{[pfelk_csv][3]}"
        "[interface][name]" =>    "%{[pfelk_csv][4]}"
        "[event][reason]" =>      "%{[pfelk_csv][5]}"
        "[event][action]" =>      "%{[pfelk_csv][6]}"
        "[network][direction]" => "%{[pfelk_csv][7]}"
        "[network][type]" =>      "%{[pfelk_csv][8]}"
      }
    }
    # [IPv4]
    # [ECS compliant fields] network.iana_number, network.protocol, source.ip, destination.ip
    # [Not ECS compliant fields] pf.tos, pf.ecn, pf.ttl, pf.id, pf.offest, pf.flags, pf.packet.length
    if [network][type] == "4" {
      mutate {
      add_field => {
          "[pf][tos]" =>	       "%{[pfelk_csv][9]}"
          "[pf][ecn]" =>	       "%{[pfelk_csv][10]}"
          "[pf][ttl]" =>	       "%{[pfelk_csv][11]}"
          "[pf][id]" =>		       "%{[pfelk_csv][12]}"
          "[pf][offset]" =>	       "%{[pfelk_csv][13]}"
          "[pf][flags]" =>	       "%{[pfelk_csv][14]}"
          "[network][iana_number]" =>   "%{[pfelk_csv][15]}"
          "[network][protocol]" =>    "%{[pfelk_csv][16]}"
          "[pf][packet][length]" =>    "%{[pfelk_csv][17]}"
          "[source][ip]" =>	       "%{[pfelk_csv][18]}"
          "[destination][ip]" =>       "%{[pfelk_csv][19]}"
        }
      }
      # [TCP]
      # [ECS compliant fields] source.port, destingation.port
      # [Not ECS compliant fields] pd.data_length, pf.tcp.flags, pf.tcp..sequence_number, pf.tcp..ack, pf.tcp..window, pf.tcp.urg, pf.tcp.options
      if [network][protocol] == "tcp" {
        mutate {
          add_field => {
            "[source][port]" =>			"%{[pfelk_csv][20]}"
            "[destination][port]" =>		"%{[pfelk_csv][21]}"
            "[pf][data_length]" =>		"%{[pfelk_csv][22]}"
            "[pf][tcp][flags]" =>		"%{[pfelk_csv][23]}"
            "[pf][tcp][sequence_number]" =>     "%{[pfelk_csv][24]}"
            "[pf][tcp][ack]" =>		        "%{[pfelk_csv][25]}"
            "[pf][tcp][window]" =>		"%{[pfelk_csv][26]}"
            "[pf][tcp][urg]" =>			"%{[pfelk_csv][27]}"
            "[pf][tcp][options]" =>	        "%{[pfelk_csv][28]}"
          }
        }
      }
      # [UDP]
      # [ECS compliant fields] source.port, destination.port 
      # [Not ECS compliant fields] pf.data_length
      if [network][protocol] == "udp" {
        mutate {
          add_field => {
            "[source][port]" =>	        "%{[pfelk_csv][20]}"
            "[destination][port]" =>	"%{[pfelk_csv][21]}"
            "[pf][data_length]" =>	"%{[pfelk_csv][22]}"
          }
        }
      }
    }
    # [IPv6]
    # [ECS compliant fields] network.iana_number, network.protocol, source.ip, destination.ip
    # [Not ECS compliant fields] pf.class, pf.flow, pf.hoplimit, pf.packet.length
    if [network][type] == "6" {
      mutate {
        add_field => {
            "[pf][class]" =>              "%{[pfelk_csv][9]}"
            "[pf][flow]" =>		  "%{[pfelk_csv][10]}"
            "[pf][hoplimit]" =>		  "%{[pfelk_csv][11]}"
            "[network][protocol]" =>      "%{[pfelk_csv][12]}"
            "[network][iana_number]" =>	  "%{[pfelk_csv][13]}"
            "[pf][packet][length]" =>	  "%{[pfelk_csv][14]}"
            "[source][ip]" =>		  "%{[pfelk_csv][15]}"
            "[destination][ip]" =>	  "%{[pfelk_csv][16]}"
        }
      }
      # [TCP]
      # [ECS compliant fields] source.port, destination.port
      # [Not ECS compliant fields] pf.data_length, pf.tcp.flags, pf.tcp..sequence_number, pf.tcp..ack, pf.tcp..window, pf.tcp.urg, pf.tcp.options
      if [network][protocol] == "tcp" {
        mutate {
          add_field => {
            "[source][port]" =>			"%{[pfelk_csv][17]}"
            "[destination][port]" =>		"%{[pfelk_csv][18]}"
            "[pf][data_length]" =>		"%{[pfelk_csv][19]}"
            "[pf][tcp][flags]" =>		"%{[pfelk_csv][20]}"
            "[pf][tcp][sequence_number]" =>     "%{[pfelk_csv][21]}"
            "[pf][tcp][ack]" =>			"%{[pfelk_csv][22]}"
            "[pf][tcp][window]" =>		"%{[pfelk_csv][23]}"
            "[pf][tcp][urg]" =>			"%{[pfelk_csv][24]}"
            "[pf][tcp][options]" =>		"%{[pfelk_csv][25]}"
          }
        }
      }
      # [UDP]
      # [ECS compliant fields] source.port, destination.port
      # [Not ECS compliant fields] pf.data_length
      if [network][protocol] == "udp" {
        mutate {
          add_field => {
            "[source][port]" =>		"%{[pfelk_csv][17]}"
            "[destination][port]" =>	"%{[pfelk_csv][18]}"
            "[pf][data_length]" =>	"%{[pfelk_csv][19]}"
          }
        }
      }
    }
    # [ECS] Rename values/fields for ECS compliance
    if [network][direction] =~ /^out$/ {
      mutate {
        rename => { "[pf][data_length]" => "[destination][bytes]" }
        rename => { "[pf][packet][length]" => "[destination][packets]" }
       }
    }
    if [network][direction] =~ /^in$/ {
      mutate {
        rename => { "[pf][data_length]" => "[source][bytes]" }
        rename => { "[pf][packet][length]" => "[source][packets]" }
      }
    }
    if [network][type] == "4" {
      mutate {
        update => { "[network][type]" => "ipv4" }
      }
    }
    if [network][type] == "6" {
      mutate {
	update => { "[network][type]" => "ipv6" }
      }
    }
    if [network][direction] =~ /^in$/ {
      mutate {
	update => { "[network][direction]" => "ingress" }
      }
    }
    if [network][type] =~ /^out$/ {
      mutate {
	update => { "[network][type]" => "egress" }
      }
    }
  }
}
